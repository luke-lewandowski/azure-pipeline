parameters:
  - name: stageName
    type: string

  - name: displayName
    type: string
    default: "Deployment"

  - name: projectId
    type: string

  - name: environment
    type: string

  - name: artifactName
    type: string

  - name: firebaseToken
    type: string

  - name: dependsOn
    type: object
    default: []

  - name: condition
    type: string
    default: "succeeded()"

stages:
  - stage: ${{ parameters.stageName }}
    dependsOn: ${{ parameters.dependsOn }}
    displayName: ${{ parameters.displayName }}
    condition: ${{ parameters.condition }}
    jobs:
      - deployment: Deploy
        displayName: Deploy to Firebase Hosting
        timeoutInMinutes: 90
        environment: ${{ parameters.environment }}

        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                # - checkout: self
                - task: DownloadPipelineArtifact@2
                  displayName: "Download UI Artifact"
                  inputs:
                    artifactName: ${{ parameters.artifactName }}
                    targetPath: $(Build.SourcesDirectory)

                - task: CmdLine@2
                  displayName: Deploy
                  inputs:
                    script: |
                      export FIREBASE_TOKEN="${{ parameters.firebaseToken }}"

                      curl -sL firebase.tools | bash
                      echo "ProjectID: ${{ parameters.projectId }}"
                      firebase deploy --token "${{ parameters.firebaseToken }}" --project "${{ parameters.projectId }}" --only hosting:site --force
